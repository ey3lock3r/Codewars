import matplotlib.pyplot as plt
import matplotlib.animation as animation
import numpy as np
fig = plt.figure()
shw = np.zeros((7,7,3))
im = plt.imshow(shw, animated=True)

def test(a, b):
    assert a == b, 'Testcase failed!'
    print('Test case passed!')

def updatefig(*args):
    global shw, explorer, spiral, r_test

    r_test = next_gen(r_test)
    im.set_array(shw)

    return im,

def next_gen(cells):
    global shw
    h = len(cells)
    if h == 0:
        return cells
    
    l = len(cells[0])
    rcell = []
    new_gen = []
    shw = np.zeros((h,l,3))

    for a in range(h):
        for b in range(l):
            test = sum([1 for r in range(a-1, a+2) for c in range(b-1, b+2) if min(r, c) >= 0 and (r < h and c < l) and ((r,c) != (a,b)) and cells[r][c] == 1])
            if test == 3 or (cells[a][b] == 1 and test == 2):
                rcell.append(1)
            else:
                rcell.append(0)

        new_gen.append(rcell[:])
        rcell = []

    gen = np.array(new_gen)
    shw[gen>0] = [1,1,1]
    shw[gen<1] = [0,0,0]
    return new_gen

r_test = np.random.randint(0,2,(100,100))

cells = [
    [0,0,0,0,0,0,0],
    [0,1,1,1,0,1,0],
    [0,1,0,0,0,0,0],
    [0,0,0,0,1,1,0],
    [0,0,1,1,0,1,0],
    [0,1,0,1,0,1,0],
    [0,0,0,0,0,0,0]
]

glider =  [[1,0,0,0,0,0,0],
           [0,1,1,0,0,0,0],
           [1,1,0,0,0,0,0],
           [0,0,0,0,0,0,0],
           [0,0,0,0,0,0,0]]

glider_solution = [[0,1,0,0,0,0,0],
                   [0,0,1,0,0,0,0],
                   [1,1,1,0,0,0,0],
                   [0,0,0,0,0,0,0],
                   [0,0,0,0,0,0,0]]

sample = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
          [0, 0, 0, 1, 1, 0, 0, 0, 0, 0], 
          [0, 0, 0, 0, 1, 0, 0, 0, 0, 0], 
          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
          [0, 0, 0, 1, 1, 0, 0, 0, 0, 0], 
          [0, 0, 1, 1, 0, 0, 0, 0, 0, 0], 
          [0, 0, 0, 0, 0, 1, 0, 0, 0, 0], 
          [0, 0, 0, 0, 1, 0, 0, 0, 0, 0], 
          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

explorer = [
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
]

spiral = [
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,1,1,1,1,1,1,0,1,1,0,0,0],
[0,0,0,1,1,1,1,1,1,0,1,1,0,0,0],
[0,0,0,0,0,0,0,0,0,0,1,1,0,0,0],
[0,0,0,1,1,0,0,0,0,0,1,1,0,0,0],
[0,0,0,1,1,0,0,0,0,0,1,1,0,0,0],
[0,0,0,1,1,0,0,0,0,0,1,1,0,0,0],
[0,0,0,1,1,0,0,0,0,0,0,0,0,0,0],
[0,0,0,1,1,0,1,1,1,1,1,1,0,0,0],
[0,0,0,1,1,0,1,1,1,1,1,1,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]]

automaton = [
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0],
[0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0],
[0,0,0,0,0,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0,0,0,0,0],
[0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0],
[0,0,0,1,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,1,0,0,0],
[0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0],
[0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0]]
#test(next_gen(glider), glider_solution)
#test(next_gen(cells), [])
#print(next_gen(glider))


ani = animation.FuncAnimation(fig, updatefig, interval=1000, blit=True)
plt.show()